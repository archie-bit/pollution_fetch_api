{"timestamp":"2025-08-21T06:46:55.809771","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-21T06:46:55.810696","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/fetchin_cleaning.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-21T06:46:55.952989Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-21T06:46:55.954844Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-21T06:46:55.955904Z","level":"info","event":"Current task name:load_weather_dim","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-21T06:46:55.956392Z","level":"info","event":"Dag name:weather_to_snowflake_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-21T06:46:55.954099","level":"info","event":"Executing: \n        COPY INTO POLLUTION_OVERTIME.WEATHER_DIM\n        FROM '@%WEATHER_DIM'\n        FILE_FORMAT = (TYPE = CSV FIELD_OPTIONALLY_ENCLOSED_BY='\"' SKIP_HEADER=1)\n        FORCE = TRUE;\n        ","logger":"airflow.task.operators.airflow.providers.common.sql.operators.sql.SQLExecuteQueryOperator"}
{"timestamp":"2025-08-21T06:46:55.957203","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `from airflow.sdk import Connection` instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-08-21T06:46:55.975884","level":"info","event":"Connection Retrieved 'weather_pollution'","logger":"airflow.hooks.base"}
{"timestamp":"2025-08-21T06:46:56.782067","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `from airflow.sdk import Connection` instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-08-21T06:46:56.793658","level":"info","event":"Connection Retrieved 'weather_pollution'","logger":"airflow.hooks.base"}
{"timestamp":"2025-08-21T06:46:56.794372","level":"info","event":"Snowflake Connector for Python Version: 3.16.0, Python Version: 3.12.11, Platform: Linux-6.6.87.2-microsoft-standard-WSL2-x86_64-with-glibc2.36","logger":"snowflake.connector.connection"}
{"timestamp":"2025-08-21T06:46:56.795178","level":"info","event":"Connecting to GLOBAL Snowflake domain","logger":"snowflake.connector.connection"}
{"timestamp":"2025-08-21T06:46:58.018085","level":"info","event":"Running statement: COPY INTO POLLUTION_OVERTIME.WEATHER_DIM\n        FROM '@%WEATHER_DIM'\n        FILE_FORMAT = (TYPE = CSV FIELD_OPTIONALLY_ENCLOSED_BY='\"' SKIP_HEADER=1)\n        FORCE = TRUE;, parameters: None","logger":"airflow.task.hooks.airflow.providers.snowflake.hooks.snowflake.SnowflakeHook"}
{"timestamp":"2025-08-21T06:46:58.018300","level":"info","event":"Running statement: COPY INTO POLLUTION_OVERTIME.WEATHER_DIM\n        FROM '@%WEATHER_DIM'\n        FILE_FORMAT = (TYPE = CSV FIELD_OPTIONALLY_ENCLOSED_BY='\"' SKIP_HEADER=1)\n        FORCE = TRUE;, parameters: None","logger":"airflow.task.hooks.airflow.providers.snowflake.hooks.snowflake.SnowflakeHook"}
{"timestamp":"2025-08-21T06:46:59.730586","level":"info","event":"Rows affected: 1","logger":"airflow.task.hooks.airflow.providers.snowflake.hooks.snowflake.SnowflakeHook"}
{"timestamp":"2025-08-21T06:46:59.730992","level":"info","event":"Rows affected: 1","logger":"airflow.task.hooks.airflow.providers.snowflake.hooks.snowflake.SnowflakeHook"}
{"timestamp":"2025-08-21T06:46:59.731158","level":"info","event":"Snowflake query id: 01be8336-0000-abf4-0000-c31d0004cbe2","logger":"airflow.task.hooks.airflow.providers.snowflake.hooks.snowflake.SnowflakeHook"}
{"timestamp":"2025-08-21T06:47:00.454408","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('0198cb61-113b-7fe0-b1c8-b65b197bbb50'), task_id='load_weather_dim', dag_id='weather_to_snowflake_pipeline', run_id='manual__2025-08-21T06:46:32.875545+00:00', try_number=1, map_index=-1, hostname='74754e3105f5', context_carrier={}, task=<Task(SQLExecuteQueryOperator): load_weather_dim>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 8, 21, 6, 46, 54, 757028, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/weather_to_snowflake_pipeline/runs/manual__2025-08-21T06%3A46%3A32.875545%2B00%3A00/tasks/load_weather_dim?try_number=1')","logger":"task"}
{"timestamp":"2025-08-21T06:47:00.666905Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-21T06:47:00.667678Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-21T06:47:00.668117Z","level":"info","event":"Task operator:<Task(SQLExecuteQueryOperator): load_weather_dim>","chan":"stdout","logger":"task"}
