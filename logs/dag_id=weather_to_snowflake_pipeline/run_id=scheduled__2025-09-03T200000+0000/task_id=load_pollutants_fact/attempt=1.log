{"timestamp":"2025-09-03T20:00:49.286470","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-03T20:00:49.287446","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/fetchin_cleaning.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-03T20:00:49.365115Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T20:00:49.365581Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T20:00:49.367765Z","level":"info","event":"Current task name:load_pollutants_fact","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T20:00:49.368183Z","level":"info","event":"Dag name:weather_to_snowflake_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T20:00:49.365998","level":"info","event":"Executing: \n        COPY INTO POLLUTION_OVERTIME.POLLUTANTS_FACT\n        FROM '@%POLLUTANTS_FACT'\n        FILE_FORMAT = (TYPE = CSV FIELD_OPTIONALLY_ENCLOSED_BY='\"' SKIP_HEADER=1)\n        FORCE = TRUE;\n        ","logger":"airflow.task.operators.airflow.providers.common.sql.operators.sql.SQLExecuteQueryOperator"}
{"timestamp":"2025-09-03T20:00:49.368033","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `from airflow.sdk import Connection` instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-03T20:00:49.379291","level":"info","event":"Connection Retrieved 'weather_pollution'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-03T20:00:50.142110","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/airflow/models/connection.py:471: DeprecationWarning: Using Connection.get_connection_from_secrets from `airflow.models` is deprecated.Please use `from airflow.sdk import Connection` instead\n  warnings.warn(\n","logger":"py.warnings"}
{"timestamp":"2025-09-03T20:00:50.153983","level":"info","event":"Connection Retrieved 'weather_pollution'","logger":"airflow.hooks.base"}
{"timestamp":"2025-09-03T20:00:50.154577","level":"info","event":"Snowflake Connector for Python Version: 3.16.0, Python Version: 3.12.11, Platform: Linux-6.6.87.2-microsoft-standard-WSL2-x86_64-with-glibc2.36","logger":"snowflake.connector.connection"}
{"timestamp":"2025-09-03T20:00:50.155202","level":"info","event":"Connecting to GLOBAL Snowflake domain","logger":"snowflake.connector.connection"}
{"timestamp":"2025-09-03T20:00:51.518896","level":"info","event":"Running statement: COPY INTO POLLUTION_OVERTIME.POLLUTANTS_FACT\n        FROM '@%POLLUTANTS_FACT'\n        FILE_FORMAT = (TYPE = CSV FIELD_OPTIONALLY_ENCLOSED_BY='\"' SKIP_HEADER=1)\n        FORCE = TRUE;, parameters: None","logger":"airflow.task.hooks.airflow.providers.snowflake.hooks.snowflake.SnowflakeHook"}
{"timestamp":"2025-09-03T20:00:51.519146","level":"info","event":"Running statement: COPY INTO POLLUTION_OVERTIME.POLLUTANTS_FACT\n        FROM '@%POLLUTANTS_FACT'\n        FILE_FORMAT = (TYPE = CSV FIELD_OPTIONALLY_ENCLOSED_BY='\"' SKIP_HEADER=1)\n        FORCE = TRUE;, parameters: None","logger":"airflow.task.hooks.airflow.providers.snowflake.hooks.snowflake.SnowflakeHook"}
{"timestamp":"2025-09-03T20:00:52.943750","level":"info","event":"Rows affected: 1","logger":"airflow.task.hooks.airflow.providers.snowflake.hooks.snowflake.SnowflakeHook"}
{"timestamp":"2025-09-03T20:00:52.944338","level":"info","event":"Rows affected: 1","logger":"airflow.task.hooks.airflow.providers.snowflake.hooks.snowflake.SnowflakeHook"}
{"timestamp":"2025-09-03T20:00:52.944470","level":"info","event":"Snowflake query id: 01becf70-0000-b788-0000-c31d000880de","logger":"airflow.task.hooks.airflow.providers.snowflake.hooks.snowflake.SnowflakeHook"}
{"timestamp":"2025-09-03T20:00:53.730858","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('0199112a-2d88-7339-af90-fa7089dcce09'), task_id='load_pollutants_fact', dag_id='weather_to_snowflake_pipeline', run_id='scheduled__2025-09-03T20:00:00+00:00', try_number=1, map_index=-1, hostname='894a893f40a3', context_carrier={}, task=<Task(SQLExecuteQueryOperator): load_pollutants_fact>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 9, 3, 20, 0, 48, 133030, tzinfo=datetime.timezone.utc), end_date=None, state=<TaskInstanceState.RUNNING: 'running'>, is_mapped=False, rendered_map_index=None, log_url='http://localhost:8080/dags/weather_to_snowflake_pipeline/runs/scheduled__2025-09-03T20%3A00%3A00%2B00%3A00/tasks/load_pollutants_fact?try_number=1')","logger":"task"}
{"timestamp":"2025-09-03T20:00:53.781780Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T20:00:53.789020Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T20:00:53.793129Z","level":"info","event":"Task operator:<Task(SQLExecuteQueryOperator): load_pollutants_fact>","chan":"stdout","logger":"task"}
