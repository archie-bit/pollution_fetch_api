{"timestamp":"2025-09-03T19:38:52.858887","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-03T19:38:52.861040","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/fetchin_cleaning.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-03T19:38:52.989251Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T19:38:52.989779Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T19:38:52.997313Z","level":"info","event":"Current task name:fetch_weather","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T19:38:52.997715Z","level":"info","event":"Dag name:weather_to_snowflake_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T19:38:53.726029Z","level":"error","event":"Traceback (most recent call last):","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-03T19:38:53.726515Z","level":"error","event":"  File \"/opt/airflow/dags/fetch_weather.py\", line 120, in <module>","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-03T19:38:53.728946Z","level":"error","event":"    get_pollution(city_dict)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-03T19:38:53.729354Z","level":"error","event":"  File \"/opt/airflow/dags/fetch_weather.py\", line 38, in get_pollution","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-03T19:38:53.731034Z","level":"error","event":"    cities = get_geo(city_dict)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-03T19:38:53.731313Z","level":"error","event":"             ^^^^^^^^^^^^^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-03T19:38:53.731581Z","level":"error","event":"  File \"/opt/airflow/dags/fetch_weather.py\", line 24, in get_geo","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-03T19:38:53.733811Z","level":"error","event":"    city_r = requests.get(f\"http://api.openweathermap.org/geo/1.0/direct?q={city['name']}&appid={apiKey}\")","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-03T19:38:53.734263Z","level":"error","event":"                                                                                                 ^^^^^^","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-03T19:38:53.734571Z","level":"error","event":"NameError: name 'apiKey' is not defined","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-03T19:38:53.768391","level":"error","event":"Task failed with exception","logger":"task","error_detail":[{"exc_type":"CalledProcessError","exc_value":"Command '['python', 'dags/fetch_weather.py']' returned non-zero exit status 1.","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":890,"name":"run"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":1177,"name":"_execute_task"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/bases/operator.py","lineno":397,"name":"wrapper"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":217,"name":"execute"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":240,"name":"execute_callable"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/callback_runner.py","lineno":81,"name":"run"},{"filename":"/opt/airflow/dags/fetchin_cleaning.py","lineno":13,"name":"fetch_weather"},{"filename":"/usr/local/lib/python3.12/subprocess.py","lineno":571,"name":"run"}],"is_group":false,"exceptions":[]}]}
{"timestamp":"2025-09-03T19:38:53.770872Z","level":"info","event":"Task instance in failure state","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T19:38:53.771217Z","level":"info","event":"Task start","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T19:38:53.771501Z","level":"info","event":"Task:<Task(PythonOperator): fetch_weather>","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-03T19:38:53.776069Z","level":"info","event":"Failure caused by Command '['python', 'dags/fetch_weather.py']' returned non-zero exit status 1.","chan":"stdout","logger":"task"}
